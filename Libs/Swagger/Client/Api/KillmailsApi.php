<?php

/**
 * KillmailsApi
 * PHP version 7
 *
 * @category Class
 * @package  WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Api;

use WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Client;
use WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\ClientInterface;
use WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Exception\RequestException;
use WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Psr7\MultipartStream;
use WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Psr7\Request;
use WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\RequestOptions;
use WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\ApiException;
use WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Configuration;
use WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\HeaderSelector;
use WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\ObjectSerializer;

/**
 * KillmailsApi Class Doc Comment
 *
 * @category Class
 * @package  WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KillmailsApi {
	/**
	 * @var ClientInterface
	 */
	protected $client;

	/**
	 * @var Configuration
	 */
	protected $config;

	/**
	 * @param ClientInterface $client
	 * @param Configuration   $config
	 * @param HeaderSelector  $selector
	 */
	public function __construct(
	ClientInterface $client = null, Configuration $config = null, HeaderSelector $selector = null
	) {
		$this->client = $client ?: new Client();
		$this->config = $config ?: new Configuration();
		$this->headerSelector = $selector ?: new HeaderSelector();
	}

	/**
	 * @return Configuration
	 */
	public function getConfig() {
		return $this->config;
	}

	/**
	 * Operation getCharactersCharacterIdKillmailsRecent
	 *
	 * Get character kills and losses
	 *
	 * @param  int $character_id An EVE character ID (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  int $max_count How many killmails to return at maximum (optional, default to 50)
	 * @param  int $max_kill_id Only return killmails with ID smaller than this. (optional)
	 * @param  string $token Access token to use if unable to set a header (optional)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetCharactersCharacterIdKillmailsRecent200Ok[]
	 */
	public function getCharactersCharacterIdKillmailsRecent($character_id, $datasource = 'tranquility', $max_count = '50', $max_kill_id = null, $token = null, $user_agent = null, $x_user_agent = null) {
		list($response) = $this->getCharactersCharacterIdKillmailsRecentWithHttpInfo($character_id, $datasource, $max_count, $max_kill_id, $token, $user_agent, $x_user_agent);
		return $response;
	}

	/**
	 * Operation getCharactersCharacterIdKillmailsRecentWithHttpInfo
	 *
	 * Get character kills and losses
	 *
	 * @param  int $character_id An EVE character ID (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  int $max_count How many killmails to return at maximum (optional, default to 50)
	 * @param  int $max_kill_id Only return killmails with ID smaller than this. (optional)
	 * @param  string $token Access token to use if unable to set a header (optional)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetCharactersCharacterIdKillmailsRecent200Ok[], HTTP status code, HTTP response headers (array of strings)
	 */
	public function getCharactersCharacterIdKillmailsRecentWithHttpInfo($character_id, $datasource = 'tranquility', $max_count = '50', $max_kill_id = null, $token = null, $user_agent = null, $x_user_agent = null) {
		$returnType = '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetCharactersCharacterIdKillmailsRecent200Ok[]';
		$request = $this->getCharactersCharacterIdKillmailsRecentRequest($character_id, $datasource, $max_count, $max_kill_id, $token, $user_agent, $x_user_agent);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch(RequestException $e) {
				throw new ApiException(
				"[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse()->getBody()->getContents()
				);
			}

			$statusCode = $response->getStatusCode();

			if($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
				sprintf(
					'[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()
				), $statusCode, $response->getHeaders(), $response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if($returnType !== 'string') {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];
		} catch(ApiException $e) {
			switch($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
							$e->getResponseBody(), '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetCharactersCharacterIdKillmailsRecent200Ok[]', $e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
							$e->getResponseBody(), '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\Forbidden', $e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 500:
					$data = ObjectSerializer::deserialize(
							$e->getResponseBody(), '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\InternalServerError', $e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation getCharactersCharacterIdKillmailsRecentAsync
	 *
	 * Get character kills and losses
	 *
	 * @param  int $character_id An EVE character ID (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  int $max_count How many killmails to return at maximum (optional, default to 50)
	 * @param  int $max_kill_id Only return killmails with ID smaller than this. (optional)
	 * @param  string $token Access token to use if unable to set a header (optional)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Promise\PromiseInterface
	 */
	public function getCharactersCharacterIdKillmailsRecentAsync($character_id, $datasource = 'tranquility', $max_count = '50', $max_kill_id = null, $token = null, $user_agent = null, $x_user_agent = null) {
		return $this->getCharactersCharacterIdKillmailsRecentAsyncWithHttpInfo($character_id, $datasource, $max_count, $max_kill_id, $token, $user_agent, $x_user_agent)
				->then(
					function ($response) {
					return $response[0];
				}
		);
	}

	/**
	 * Operation getCharactersCharacterIdKillmailsRecentAsyncWithHttpInfo
	 *
	 * Get character kills and losses
	 *
	 * @param  int $character_id An EVE character ID (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  int $max_count How many killmails to return at maximum (optional, default to 50)
	 * @param  int $max_kill_id Only return killmails with ID smaller than this. (optional)
	 * @param  string $token Access token to use if unable to set a header (optional)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Promise\PromiseInterface
	 */
	public function getCharactersCharacterIdKillmailsRecentAsyncWithHttpInfo($character_id, $datasource = 'tranquility', $max_count = '50', $max_kill_id = null, $token = null, $user_agent = null, $x_user_agent = null) {
		$returnType = '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetCharactersCharacterIdKillmailsRecent200Ok[]';
		$request = $this->getCharactersCharacterIdKillmailsRecentRequest($character_id, $datasource, $max_count, $max_kill_id, $token, $user_agent, $x_user_agent);

		return $this->client
				->sendAsync($request, $this->createHttpClientOption())
				->then(
					function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				}, function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()
					), $statusCode, $response->getHeaders(), $response->getBody()
					);
				}
		);
	}

	/**
	 * Create request for operation 'getCharactersCharacterIdKillmailsRecent'
	 *
	 * @param  int $character_id An EVE character ID (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  int $max_count How many killmails to return at maximum (optional, default to 50)
	 * @param  int $max_kill_id Only return killmails with ID smaller than this. (optional)
	 * @param  string $token Access token to use if unable to set a header (optional)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Psr7\Request
	 */
	protected function getCharactersCharacterIdKillmailsRecentRequest($character_id, $datasource = 'tranquility', $max_count = '50', $max_kill_id = null, $token = null, $user_agent = null, $x_user_agent = null) {
		// verify the required parameter 'character_id' is set
		if($character_id === null) {
			throw new \InvalidArgumentException(
			'Missing the required parameter $character_id when calling getCharactersCharacterIdKillmailsRecent'
			);
		}
		if($max_count !== null && $max_count > 5000) {
			throw new \InvalidArgumentException('invalid value for "$max_count" when calling KillmailsApi.getCharactersCharacterIdKillmailsRecent, must be smaller than or equal to 5000.');
		}


		$resourcePath = '/latest/characters/{character_id}/killmails/recent/';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;

		// query params
		if($datasource !== null) {
			$queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
		}
		// query params
		if($max_count !== null) {
			$queryParams['max_count'] = ObjectSerializer::toQueryValue($max_count);
		}
		// query params
		if($max_kill_id !== null) {
			$queryParams['max_kill_id'] = ObjectSerializer::toQueryValue($max_kill_id);
		}
		// query params
		if($token !== null) {
			$queryParams['token'] = ObjectSerializer::toQueryValue($token);
		}
		// query params
		if($user_agent !== null) {
			$queryParams['user_agent'] = ObjectSerializer::toQueryValue($user_agent);
		}
		// header params
		if($x_user_agent !== null) {
			$headerParams['X-User-Agent'] = ObjectSerializer::toHeaderValue($x_user_agent);
		}

		// path params
		if($character_id !== null) {
			$resourcePath = str_replace(
				'{' . 'character_id' . '}', ObjectSerializer::toPathValue($character_id), $resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json'], []
			);
		}

		// for model (json/xml)
		if(isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\json_encode($httpBody);
			}
		} elseif(count($formParams) > 0) {
			if($multipart) {
				$multipartContents = [];
				foreach($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);
			} elseif($headers['Content-Type'] === 'application/json') {
				$httpBody = \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\json_encode($formParams);
			} else {
				// for HTTP post (form)
				$httpBody = \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Psr7\build_query($formParams);
			}
		}

		// this endpoint requires OAuth (access token)
		if($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders, $headerParams, $headers
		);

		$query = \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Psr7\build_query($queryParams);
		return new Request(
			'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody
		);
	}

	/**
	 * Operation getCorporationsCorporationIdKillmailsRecent
	 *
	 * Get corporation kills and losses
	 *
	 * @param  int $corporation_id An EVE corporation ID (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  int $max_kill_id Only return killmails with ID smaller than this (optional)
	 * @param  string $token Access token to use if unable to set a header (optional)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetCorporationsCorporationIdKillmailsRecent200Ok[]
	 */
	public function getCorporationsCorporationIdKillmailsRecent($corporation_id, $datasource = 'tranquility', $max_kill_id = null, $token = null, $user_agent = null, $x_user_agent = null) {
		list($response) = $this->getCorporationsCorporationIdKillmailsRecentWithHttpInfo($corporation_id, $datasource, $max_kill_id, $token, $user_agent, $x_user_agent);
		return $response;
	}

	/**
	 * Operation getCorporationsCorporationIdKillmailsRecentWithHttpInfo
	 *
	 * Get corporation kills and losses
	 *
	 * @param  int $corporation_id An EVE corporation ID (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  int $max_kill_id Only return killmails with ID smaller than this (optional)
	 * @param  string $token Access token to use if unable to set a header (optional)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetCorporationsCorporationIdKillmailsRecent200Ok[], HTTP status code, HTTP response headers (array of strings)
	 */
	public function getCorporationsCorporationIdKillmailsRecentWithHttpInfo($corporation_id, $datasource = 'tranquility', $max_kill_id = null, $token = null, $user_agent = null, $x_user_agent = null) {
		$returnType = '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetCorporationsCorporationIdKillmailsRecent200Ok[]';
		$request = $this->getCorporationsCorporationIdKillmailsRecentRequest($corporation_id, $datasource, $max_kill_id, $token, $user_agent, $x_user_agent);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch(RequestException $e) {
				throw new ApiException(
				"[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse()->getBody()->getContents()
				);
			}

			$statusCode = $response->getStatusCode();

			if($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
				sprintf(
					'[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()
				), $statusCode, $response->getHeaders(), $response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if($returnType !== 'string') {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];
		} catch(ApiException $e) {
			switch($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
							$e->getResponseBody(), '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetCorporationsCorporationIdKillmailsRecent200Ok[]', $e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
							$e->getResponseBody(), '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\Forbidden', $e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 500:
					$data = ObjectSerializer::deserialize(
							$e->getResponseBody(), '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\InternalServerError', $e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation getCorporationsCorporationIdKillmailsRecentAsync
	 *
	 * Get corporation kills and losses
	 *
	 * @param  int $corporation_id An EVE corporation ID (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  int $max_kill_id Only return killmails with ID smaller than this (optional)
	 * @param  string $token Access token to use if unable to set a header (optional)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Promise\PromiseInterface
	 */
	public function getCorporationsCorporationIdKillmailsRecentAsync($corporation_id, $datasource = 'tranquility', $max_kill_id = null, $token = null, $user_agent = null, $x_user_agent = null) {
		return $this->getCorporationsCorporationIdKillmailsRecentAsyncWithHttpInfo($corporation_id, $datasource, $max_kill_id, $token, $user_agent, $x_user_agent)
				->then(
					function ($response) {
					return $response[0];
				}
		);
	}

	/**
	 * Operation getCorporationsCorporationIdKillmailsRecentAsyncWithHttpInfo
	 *
	 * Get corporation kills and losses
	 *
	 * @param  int $corporation_id An EVE corporation ID (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  int $max_kill_id Only return killmails with ID smaller than this (optional)
	 * @param  string $token Access token to use if unable to set a header (optional)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Promise\PromiseInterface
	 */
	public function getCorporationsCorporationIdKillmailsRecentAsyncWithHttpInfo($corporation_id, $datasource = 'tranquility', $max_kill_id = null, $token = null, $user_agent = null, $x_user_agent = null) {
		$returnType = '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetCorporationsCorporationIdKillmailsRecent200Ok[]';
		$request = $this->getCorporationsCorporationIdKillmailsRecentRequest($corporation_id, $datasource, $max_kill_id, $token, $user_agent, $x_user_agent);

		return $this->client
				->sendAsync($request, $this->createHttpClientOption())
				->then(
					function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				}, function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()
					), $statusCode, $response->getHeaders(), $response->getBody()
					);
				}
		);
	}

	/**
	 * Create request for operation 'getCorporationsCorporationIdKillmailsRecent'
	 *
	 * @param  int $corporation_id An EVE corporation ID (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  int $max_kill_id Only return killmails with ID smaller than this (optional)
	 * @param  string $token Access token to use if unable to set a header (optional)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Psr7\Request
	 */
	protected function getCorporationsCorporationIdKillmailsRecentRequest($corporation_id, $datasource = 'tranquility', $max_kill_id = null, $token = null, $user_agent = null, $x_user_agent = null) {
		// verify the required parameter 'corporation_id' is set
		if($corporation_id === null) {
			throw new \InvalidArgumentException(
			'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdKillmailsRecent'
			);
		}

		$resourcePath = '/latest/corporations/{corporation_id}/killmails/recent/';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;

		// query params
		if($datasource !== null) {
			$queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
		}
		// query params
		if($max_kill_id !== null) {
			$queryParams['max_kill_id'] = ObjectSerializer::toQueryValue($max_kill_id);
		}
		// query params
		if($token !== null) {
			$queryParams['token'] = ObjectSerializer::toQueryValue($token);
		}
		// query params
		if($user_agent !== null) {
			$queryParams['user_agent'] = ObjectSerializer::toQueryValue($user_agent);
		}
		// header params
		if($x_user_agent !== null) {
			$headerParams['X-User-Agent'] = ObjectSerializer::toHeaderValue($x_user_agent);
		}

		// path params
		if($corporation_id !== null) {
			$resourcePath = str_replace(
				'{' . 'corporation_id' . '}', ObjectSerializer::toPathValue($corporation_id), $resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json'], []
			);
		}

		// for model (json/xml)
		if(isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\json_encode($httpBody);
			}
		} elseif(count($formParams) > 0) {
			if($multipart) {
				$multipartContents = [];
				foreach($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);
			} elseif($headers['Content-Type'] === 'application/json') {
				$httpBody = \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\json_encode($formParams);
			} else {
				// for HTTP post (form)
				$httpBody = \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Psr7\build_query($formParams);
			}
		}

		// this endpoint requires OAuth (access token)
		if($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders, $headerParams, $headers
		);

		$query = \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Psr7\build_query($queryParams);
		return new Request(
			'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody
		);
	}

	/**
	 * Operation getKillmailsKillmailIdKillmailHash
	 *
	 * Get a single killmail
	 *
	 * @param  string $killmail_hash The killmail hash for verification (required)
	 * @param  int $killmail_id The killmail ID to be queried (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetKillmailsKillmailIdKillmailHashOk
	 */
	public function getKillmailsKillmailIdKillmailHash($killmail_hash, $killmail_id, $datasource = 'tranquility', $user_agent = null, $x_user_agent = null) {
		list($response) = $this->getKillmailsKillmailIdKillmailHashWithHttpInfo($killmail_hash, $killmail_id, $datasource, $user_agent, $x_user_agent);
		return $response;
	}

	/**
	 * Operation getKillmailsKillmailIdKillmailHashWithHttpInfo
	 *
	 * Get a single killmail
	 *
	 * @param  string $killmail_hash The killmail hash for verification (required)
	 * @param  int $killmail_id The killmail ID to be queried (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetKillmailsKillmailIdKillmailHashOk, HTTP status code, HTTP response headers (array of strings)
	 */
	public function getKillmailsKillmailIdKillmailHashWithHttpInfo($killmail_hash, $killmail_id, $datasource = 'tranquility', $user_agent = null, $x_user_agent = null) {
		$returnType = '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetKillmailsKillmailIdKillmailHashOk';
		$request = $this->getKillmailsKillmailIdKillmailHashRequest($killmail_hash, $killmail_id, $datasource, $user_agent, $x_user_agent);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch(RequestException $e) {
				throw new ApiException(
				"[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse()->getBody()->getContents()
				);
			}

			$statusCode = $response->getStatusCode();

			if($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
				sprintf(
					'[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()
				), $statusCode, $response->getHeaders(), $response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if($returnType !== 'string') {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];
		} catch(ApiException $e) {
			switch($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
							$e->getResponseBody(), '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetKillmailsKillmailIdKillmailHashOk', $e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 422:
					$data = ObjectSerializer::deserialize(
							$e->getResponseBody(), '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetKillmailsKillmailIdKillmailHashUnprocessableEntity', $e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 500:
					$data = ObjectSerializer::deserialize(
							$e->getResponseBody(), '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\InternalServerError', $e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation getKillmailsKillmailIdKillmailHashAsync
	 *
	 * Get a single killmail
	 *
	 * @param  string $killmail_hash The killmail hash for verification (required)
	 * @param  int $killmail_id The killmail ID to be queried (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Promise\PromiseInterface
	 */
	public function getKillmailsKillmailIdKillmailHashAsync($killmail_hash, $killmail_id, $datasource = 'tranquility', $user_agent = null, $x_user_agent = null) {
		return $this->getKillmailsKillmailIdKillmailHashAsyncWithHttpInfo($killmail_hash, $killmail_id, $datasource, $user_agent, $x_user_agent)
				->then(
					function ($response) {
					return $response[0];
				}
		);
	}

	/**
	 * Operation getKillmailsKillmailIdKillmailHashAsyncWithHttpInfo
	 *
	 * Get a single killmail
	 *
	 * @param  string $killmail_hash The killmail hash for verification (required)
	 * @param  int $killmail_id The killmail ID to be queried (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Promise\PromiseInterface
	 */
	public function getKillmailsKillmailIdKillmailHashAsyncWithHttpInfo($killmail_hash, $killmail_id, $datasource = 'tranquility', $user_agent = null, $x_user_agent = null) {
		$returnType = '\WordPress\Plugin\EveOnlineIntelTool\Libs\Swagger\Client\Model\GetKillmailsKillmailIdKillmailHashOk';
		$request = $this->getKillmailsKillmailIdKillmailHashRequest($killmail_hash, $killmail_id, $datasource, $user_agent, $x_user_agent);

		return $this->client
				->sendAsync($request, $this->createHttpClientOption())
				->then(
					function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				}, function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()
					), $statusCode, $response->getHeaders(), $response->getBody()
					);
				}
		);
	}

	/**
	 * Create request for operation 'getKillmailsKillmailIdKillmailHash'
	 *
	 * @param  string $killmail_hash The killmail hash for verification (required)
	 * @param  int $killmail_id The killmail ID to be queried (required)
	 * @param  string $datasource The server name you would like data from (optional, default to tranquility)
	 * @param  string $user_agent Client identifier, takes precedence over headers (optional)
	 * @param  string $x_user_agent Client identifier, takes precedence over User-Agent (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Psr7\Request
	 */
	protected function getKillmailsKillmailIdKillmailHashRequest($killmail_hash, $killmail_id, $datasource = 'tranquility', $user_agent = null, $x_user_agent = null) {
		// verify the required parameter 'killmail_hash' is set
		if($killmail_hash === null) {
			throw new \InvalidArgumentException(
			'Missing the required parameter $killmail_hash when calling getKillmailsKillmailIdKillmailHash'
			);
		}
		// verify the required parameter 'killmail_id' is set
		if($killmail_id === null) {
			throw new \InvalidArgumentException(
			'Missing the required parameter $killmail_id when calling getKillmailsKillmailIdKillmailHash'
			);
		}

		$resourcePath = '/latest/killmails/{killmail_id}/{killmail_hash}/';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;

		// query params
		if($datasource !== null) {
			$queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
		}
		// query params
		if($user_agent !== null) {
			$queryParams['user_agent'] = ObjectSerializer::toQueryValue($user_agent);
		}
		// header params
		if($x_user_agent !== null) {
			$headerParams['X-User-Agent'] = ObjectSerializer::toHeaderValue($x_user_agent);
		}

		// path params
		if($killmail_hash !== null) {
			$resourcePath = str_replace(
				'{' . 'killmail_hash' . '}', ObjectSerializer::toPathValue($killmail_hash), $resourcePath
			);
		}
		// path params
		if($killmail_id !== null) {
			$resourcePath = str_replace(
				'{' . 'killmail_id' . '}', ObjectSerializer::toPathValue($killmail_id), $resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json'], []
			);
		}

		// for model (json/xml)
		if(isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\json_encode($httpBody);
			}
		} elseif(count($formParams) > 0) {
			if($multipart) {
				$multipartContents = [];
				foreach($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);
			} elseif($headers['Content-Type'] === 'application/json') {
				$httpBody = \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\json_encode($formParams);
			} else {
				// for HTTP post (form)
				$httpBody = \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Psr7\build_query($formParams);
			}
		}


		$defaultHeaders = [];
		if($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders, $headerParams, $headers
		);

		$query = \WordPress\Plugin\EveOnlineIntelTool\Libs\GuzzleHttp\Psr7\build_query($queryParams);
		return new Request(
			'GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody
		);
	}

	/**
	 * Create http client option
	 *
	 * @throws \RuntimeException on file opening failure
	 * @return array of http client options
	 */
	protected function createHttpClientOption() {
		$options = [];
		if($this->config->getDebug()) {
			$options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
			if(!$options[RequestOptions::DEBUG]) {
				throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
			}
		}

		return $options;
	}

}
